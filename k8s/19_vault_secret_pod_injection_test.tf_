# https://developer.hashicorp.com/vault/tutorials/kubernetes/kubernetes-sidecar
# https://developer.hashicorp.com/vault/docs/platform/k8s/injector/examples#patching-existing-pods
# https://developer.hashicorp.com/vault/docs/platform/k8s/injector/annotations
# https://cogarius.medium.com/a-vault-for-all-your-secrets-full-tls-on-kubernetes-with-kv-v2-c0ecd42853e1

# 실행전 사전 준비사항 
#
# 18번을 통해서 Vault 를 미리 설치 후 아래 설정을 진행

# Vault Secret Injection
#   Vault Secret 엔진 활성화 
#     vault secrets enable -path=internal kv-v2
#
#   Vault Secret 생성 
#     vault kv put internal/database/config username="db-readonly-username" password="db-secret-password"
#     vault kv get internal/database/config
#
#   Vault Policy 생성
#     echo @"
#     path "internal/data/database/config" {
#       capabilities = ["read"]
#     }
#     "@ | out-file -encoding ASCII  policy.hcl
#     vault policy write internal-app policy.hcl
#
#
#   Vault 에 kubernetes Auth 활성화 
#      vault auth enable kubernetes 
#      $kubernetesHostURL = "<EKS_API_ENDPOINT_URL>" 
#         ex> $kubernetesHostURL = "https://DCAD328EE27D0DAE0FB38191C05D30A3.gr7.ap-northeast-2.eks.amazonaws.com" 
#      $secretName = (kubectl get serviceaccount  --namespace vault-server vault-agent-injector  -o jsonpath='{.secrets[0].name}')
#      $jwtTokenEncoded = (kubectl get secret --namespace vault-server $secretName -o jsonpath='{ .data.token }')
#      $jwtToken = ([Text.Encoding]::Utf8.GetString([Convert]::FromBase64String("$jwtTokenEncoded")))
#      vault write auth/kubernetes/config  token_reviewer_jwt="$jwtToken" kubernetes_host="$kubernetesHostURL" 
#
#   Vault Kubernetes Auth 에서 Create Role
#      vault write auth/kubernetes/role/internal-app bound_service_account_names=internal-app  bound_service_account_namespaces=default policies=internal-app  ttl=24h


resource "kubernetes_service_account_v1" "vault_sa" {
  metadata {
    name = "internal-app"
  }
  depends_on = [
    module.eks_vault_installer_test
  ]
}

resource "kubernetes_service_v1" "nlb_sample_service" {
  metadata {
    name = "nlb-sample-service"

    annotations = {
      "service.beta.kubernetes.io/aws-load-balancer-type" = "nlb"
      "external-dns.alpha.kubernetes.io/hostname"         = "sample.idtplateer.com"
    }
  }

  spec {
    port {
      protocol    = "TCP"
      port        = 80
      target_port = "80"
    }

    selector = {
      app = "nginx"
    }

    type = "LoadBalancer"
  }

  depends_on = [
    module.eks_vault_installer_test
  ]
}

resource "kubernetes_deployment_v1" "example" {
  metadata {
    name = "nlb-sample-app"
  }

  spec {
    replicas = 1

    selector {
      match_labels = {
        app = "nginx"
      }
    }
    template {
      metadata {
        labels = {
          app = "nginx"
        }

#        annotations = {
#          "vault.hashicorp.com/agent-inject"                              = "true"
#          "vault.hashicorp.com/tls-skip-verify"                           = "true"
#          "vault.hashicorp.com/role"                                      = kubernetes_service_account_v1.vault_sa.metadata[0].name
#          "vault.hashicorp.com/agent-inject-secret-database-config.txt"   = "internal/data/database/config"
##          "vault.hashicorp.com/agent-inject-status"                       = "update"
##          "vault.hashicorp.com/agent-inject-template-database-config.txt" = <<EOF
##{{- with secret "internal/data/database/config" -}}
##postgresql://{{ .Data.data.username }}:{{ .Data.data.password }}@postgres:5432/wizard
##{{- end -}}
##          EOF
#        }
      }

      spec {
        service_account_name = kubernetes_service_account_v1.vault_sa.metadata[0].name
        container {
          image = "nginx"
          name  = "nginx"

          resources {
            limits = {
              cpu    = "0.5"
              memory = "512Mi"
            }
            requests = {
              cpu    = "250m"
              memory = "50Mi"
            }
          }

          liveness_probe {
            http_get {
              path = "/"
              port = 80

              http_header {
                name  = "X-Custom-Header"
                value = "Awesome"
              }
            }

            initial_delay_seconds = 3
            period_seconds        = 3
          }
        }
      }
    }
  }

  depends_on = [
    module.eks_vault_installer_test
  ]
}


#  k8s deployment 에서 annotation 주석 풀기
#
#  terraform apply --auto-approve
#
# 배포된  pod 에 vault secret 주입되었는지 확인 
#      kubectl exec -it $(kubectl get pod -l app=nginx -o jsonpath="{.items[0].metadata.name}") /bin/sh 
#      cat /vault/secrets/database-config.txt 
#      kubectl logs $(kubectl get pod -l app=nginx -o jsonpath="{.items[0].metadata.name}") --max-log-requests=100
#
# Bug? 배포된 pod injector 가 hang 되는 현상이 있으면 ui 에서 kubernetes auth 를 enable 하고 수동으로 넣어보자.. 왜 그런지는 모르겠지만 이러면 해결된다. 