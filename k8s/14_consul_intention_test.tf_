locals {
  domain     = "consul"
  namespace  = "consul"
  datacenter = "dc1"
}

module "eks_consul_installer" {
  source = "../eks/modules/terraform-aws-eks-consul"

  create_namespace                      = true
  server_datacenter                     = local.datacenter
  consul_domain                         = local.domain
  chart_namespace                       = local.namespace
  gossip_enable_auto_generate           = true
  tls_enable_auto_encrypt               = true
  metrics_enabled                       = true
  enable_agent_metrics                  = true
  enable_gateway_metrics                = true  
  connect_enable                        = true
  ingress_gateway_enable                = false
  enable_prometheus                     = false
  enable_test_pod                       = false
  enable_connect_inject                 = true
  connect_inject_by_default             = true
  connect_inject_default_enable_merging = true

  #################################################################################
  # ACL Enable
  #################################################################################
  manage_system_acls = true
}


#################################################################################
# Server
#################################################################################

# Service Name 이 static-server 인 Service 에서 사용할 정보중 중복되는 정보를 관리해 줌
resource "kubectl_manifest" "service_defaults_server" {
  yaml_body = <<YAML
apiVersion: consul.hashicorp.com/v1alpha1
kind: ServiceDefaults
metadata:
  name: static-server
spec:
  protocol: 'http'
YAML
  depends_on = [
    module.eks_consul_installer
  ]
}

resource "kubernetes_service_account_v1" "static_server" {
  metadata {
    name = "static-server"
  }
  depends_on = [
    module.eks_consul_installer
  ]
}

resource "kubernetes_service_v1" "static_server" {
  metadata {
    name = "static-server"
  }

  spec {
    port {
      port        = 80
      target_port = 8080
    }

    selector = {
      app = "static-server"
    }
  }

  depends_on = [
    kubectl_manifest.service_defaults_server
  ]
}


resource "kubernetes_deployment" "static_server" {
  metadata {
    name = "static-server"

    labels = {
      app = "static-server"
    }
  }

  spec {
    replicas = 1

    selector {
      match_labels = {
        app = "static-server"
      }
    }

    template {
      metadata {
        labels = {
          app = "static-server"
        }

        annotations = {
          "consul.hashicorp.com/connect-inject" = "true"
        }
      }

      spec {
        container {
          name  = "static-server"
          image = "hashicorp/http-echo:latest"
          args  = ["-text=\"hello world\"", "-listen=:8080"]

          port {
            container_port = 8080
          }
        }

        service_account_name = "static-server"
      }
    }
  }

  depends_on = [
    kubectl_manifest.service_defaults_server
  ]
}


#################################################################################
# Client > Downstream 아니고 단순히 Server 에 접근 가능한지를 확인하기 위한 Client
#################################################################################

# Service Name 이 static-client 인 Service 에서 사용할 정보중 중복되는 정보를 관리해 줌
resource "kubectl_manifest" "service_defaults_client" {
  yaml_body = <<YAML
apiVersion: consul.hashicorp.com/v1alpha1
kind: ServiceDefaults
metadata:
  name: static-client
spec:
  protocol: 'http'
YAML
  depends_on = [
    module.eks_consul_installer
  ]
}

resource "kubernetes_service_account" "static_client" {
  metadata {
    name = "static-client"
  }
  depends_on = [
    module.eks_consul_installer
  ]
}


resource "kubernetes_service" "static_client" {
  metadata {
    name = "static-client"
  }

  spec {
    port {
      port = 80
    }

    selector = {
      app = "static-client"
    }
  }

  depends_on = [
    kubernetes_deployment.static_server
  ]
}


resource "kubernetes_deployment" "static_client" {
  metadata {
    name = "static-client"

    labels = {
      app = "static-client"
    }
  }

  spec {
    replicas = 1

    selector {
      match_labels = {
        app = "static-client"
      }
    }

    template {
      metadata {
        labels = {
          app = "static-client"
        }

        annotations = {
          "consul.hashicorp.com/connect-inject" = "true"
        }
      }

      spec {
        container {
          name    = "static-client"
          image   = "rancher/curlimages-curl:7.73.0"
          command = ["/bin/sh", "-c", "--"]
          args    = ["while true; do sleep 30; done;"]
        }

        service_account_name = "static-client"
      }
    }
  }

  depends_on = [
    kubernetes_deployment.static_server
  ]
}

#################################################################################
# Service Intention
#################################################################################
/*
resource "kubectl_manifest" "service_intention" {
  yaml_body = <<YAML
apiVersion: consul.hashicorp.com/v1alpha1
kind: ServiceIntentions
metadata:
  name: client-to-server
spec:
  destination:
    name: static-server
  sources:
    - name: static-client
      action: allow
YAML
  depends_on = [
    kubernetes_deployment.static_server
  ]
}
*/

# Check Result
#    aws eks --region ap-northeast-2 update-kubeconfig --name eks-cluster-dk
#
# UI 활성화 확인
#    kubectl port-forward service/consul-consul-server --namespace consul 8501:8501
#    https://localhost:8501/ui/dc1/services
#
# Intention 을 켜고 끌때 Service 확인
#    kubectl exec deploy/static-client -c static-client -- curl -s http://static-server
#    "hello world"
