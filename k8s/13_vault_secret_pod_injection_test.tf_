module "eks_vault_installer_test" {
  source = "../eks/modules/terraform-aws-eks-vault" 

  resource_name_prefix    = "idt-aa"
  aws_region              = var.aws_region
  cluster_name            = data.terraform_remote_state.eks.outputs.eks_cluster.cluster_id
  provider_arn            = data.terraform_remote_state.eks.outputs.eks_oidc_provider.arn
  public_dns_name         = "idtplateer.com"
  acm_vault_arn           = "arn:aws:acm:ap-northeast-2:960249453675:certificate/3915d0da-6dd2-4384-8fb0-558b25bf1ff4"
  node_group_public_name  = data.terraform_remote_state.eks.outputs.eks_public_node_group.node_group_public_name
  node_group_private_name = data.terraform_remote_state.eks.outputs.eks_private_node_group.node_group_private_name
}

# Vault Init
#    kubectl get pod -n vault-server
#    kubectl exec -it vault-0 /bin/sh -n vault-server
#    vault status
#    vault operator init 
#    exit
# 
# UI 확인
#    https://vault.idtplateer.com
# 
# Vault Settings (Non-Internal-CA) 
#    $env:VAULT_ADDR = "https://vault.idtplateer.com" 
#    vault login 
#
# Vault Secret Injection
#   Vault Secret 엔진 활성화 
#     vault secrets enable -path=internal kv-v2
#
#   Vault Secret 생성 
#     vault kv put internal/database/config username="db-readonly-username" password="db-secret-password"
#     vault kv get internal/database/config
#
#   Vault Policy 생성
#     echo @"
#     path "internal/data/database/config" {
#       capabilities = ["read"]
#     }
#     "@ | out-file -encoding ASCII  policy.hcl
#     vault policy write internal-app policy.hcl
#
#
#   Vault 에 kubernetes Auth 활성화 
#      vault auth enable kubernetes 
#      kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[].cluster.server}'
#       https://BAEE9A570032DF9C668E984CE11C2CAC.yl4.ap-northeast-2.eks.amazonaws.com
#      $kubernetesHostURL = "https://BAEE9A570032DF9C668E984CE11C2CAC.yl4.ap-northeast-2.eks.amazonaws.com" 
#      vault write auth/kubernetes/config  kubernetes_host="$kubernetesHostURL" 
#
#   Vault Kubernetes Auth 에서 Create Role
#      vault write auth/kubernetes/role/internal-app bound_service_account_names=internal-app  bound_service_account_namespaces=default policies=internal-app  ttl=24h

/*
resource "kubernetes_service_account_v1" "vault_sa" {
  metadata {
    name = "internal-app"
  }
  depends_on = [
    module.eks_vault_installer_test
  ]
}

resource "kubernetes_service_v1" "nlb_sample_service" {
  metadata {
    name = "nlb-sample-service"

    annotations = {
      "service.beta.kubernetes.io/aws-load-balancer-type" = "nlb"
      "external-dns.alpha.kubernetes.io/hostname"         = "sample.idtplateer.com"
    }
  }

  spec {
    port {
      protocol    = "TCP"
      port        = 80
      target_port = "80"
    }

    selector = {
      app = "nginx"
    }

    type = "LoadBalancer"
  }

  depends_on = [
    module.eks_vault_installer_test
  ]
}

resource "kubernetes_deployment_v1" "example" {
  metadata {
    name = "nlb-sample-app"
  }

  spec {
    replicas = 1

    selector {
      match_labels = {
        app = "nginx"
      }
    }
    template {
      metadata {
        labels = {
          app = "nginx"
        }

        annotations = {
          "vault.hashicorp.com/agent-inject"                              = "true"
          "vault.hashicorp.com/tls-skip-verify"                           = "true"
          "vault.hashicorp.com/role"                                      = "internal-app"
          "vault.hashicorp.com/agent-inject-secret-database-config.txt"   = "internal/data/database/config"
          "vault.hashicorp.com/agent-inject-status"                       = "update"
          "vault.hashicorp.com/agent-inject-template-database-config.txt" = <<EOF
{{- with secret "internal/data/database/config" -}}
postgresql://{{ .Data.data.username }}:{{ .Data.data.password }}@postgres:5432/wizard
{{- end -}}
          EOF
        }
      }

      spec {
        service_account_name = "internal-app"
        container {
          image = "nginx"
          name  = "nginx"

          liveness_probe {
            http_get {
              path = "/"
              port = 80

              http_header {
                name  = "X-Custom-Header"
                value = "Awesome"
              }
            }

            initial_delay_seconds = 3
            period_seconds        = 3
          }
        }
      }
    }
  }

  depends_on = [
    module.eks_vault_installer_test
  ]
}
*/

#  k8s deployment 에서 annotation 주석 풀기
#
#  terraform apply --auto-approve
#
# 배포된  pod 에 vault secret 주입되었는지 확인 
#      kubectl exec -it $(kubectl get pod -l app=nginx -o jsonpath="{.items[0].metadata.name}") /bin/sh 
#      cat /vault/secrets/database-config.txt 
#      kubectl logs $(kubectl get pod -l app=nginx -o jsonpath="{.items[0].metadata.name}") --max-log-requests=100
#
# Bug? 배포된 pod injector 가 hang 되는 현상이 있으면 ui 에서 kubernetes auth 를 enable 하고 수동으로 넣어보자.. 왜 그런지는 모르겠지만 이러면 해결된다. 
#      token_reviewer_jwt 빼고 하니 되는건가; 